import React, { useState, useEffect } from 'react';
import './CustomerList.css';
import search from '../../../assets/img/icon/search-1.svg';
import delet from '../../../assets/img/admin/delete.svg';
import edit from '../../../assets/img/admin/edit.svg';
import DeletePopup from '../Popup/DeletePopup';
import { AdminApi } from '../../../assets/api/api';
import EditOrderPopup from '../Popup/EditOrderPopup';

const CustomerList = () => {
  const [originalPeopleData, setOriginalPeopleData] = useState([]); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
  const [peopleData, setPeopleData] = useState([]); // –°—Ç–µ–π—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  const [currentPage, setCurrentPage] = useState(1); // –°—Ç–µ–π—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const [searchText, setSearchText] = useState(''); // –°—Ç–µ–π—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ—à—É–∫—É
  const [showDeletePopup, setShowDeletePopup] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–ø–∞–ø—É
  const [customersToDelete, setCustomersToDelete] = useState(null); // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥–≥—É–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false);
  const [orderToEdit, setOrderToEdit] = useState(null);
  

  const itemsPerPage = 8; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

  useEffect(() => {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ó—Ö —É —Å—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    AdminApi.getAdminOrders()
      .then(response => {
        console.log(response)
        const peopleData = Array.isArray(response.data.orders) ? response.data.orders : [];
        const formattedOrders = peopleData.map(order => ({
          id: order._id,
          firstName: order.firstName,
          lastName: order.lastName,
          phone: order.phoneNumber,
          city: order.city,
          postOffice: order.postOffice,
          numberPost: order.numberPost,
          productItems: order.productItems.map(productItem => ({
            title: productItem.title,
            quantity: productItem.quantity,
            price: productItem.price,
            total: productItem.total
          })),
          position: order.position,
          ttn: order.ttn,
          totalAmount: order.totalAmount,
        }));
        setOriginalPeopleData(formattedOrders);
        setPeopleData(formattedOrders);
      })
      .catch(error => {
        console.error('Error fetching orders:', error);
      });
  }, []);

  const displayPage = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const displayedData = peopleData.slice(startIndex, endIndex);

    return displayedData;
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      filterList();
    }
  };

  const handlePageClick = newPage => {
    setCurrentPage(newPage);
  };


  
  const filterList = () => {
    if (searchText.trim() === '') {
      // –Ø–∫—â–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É –ø–æ—Ä–æ–∂–Ω—î, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
      setPeopleData(originalPeopleData);
    } else {
      const filteredData = originalPeopleData.filter(
        person =>
          person.name.toLowerCase().includes(searchText.toLowerCase()) ||
          person.number.includes(searchText) ||
          person.email.toLowerCase().includes(searchText.toLowerCase())
      );
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      setPeopleData(filteredData);
      setCurrentPage(1); // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –ø–µ—Ä—à–æ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
    }
  };
  const openDeletePopup = orderId => {
    setCustomersToDelete(orderId);
    setShowDeletePopup(true);
  };

  const closeDeletePopup = () => {
    setCustomersToDelete(null);
    setShowDeletePopup(false);
  };
  const handleDeleteCustomers = async () => {
    try {
      console.log('Deleting product:', customersToDelete);
      await AdminApi.deleteAdminOrder(customersToDelete);
      const updatedCustomersList = peopleData.filter(order => order.id !== customersToDelete);
      console.log('Updated list:', updatedCustomersList);
      setPeopleData(updatedCustomersList);
      closeDeletePopup();
    } catch (error) {
      console.error('Error deleting product:', error.response);
    }
  };
  const getStatusEmoji = (position) => {
    switch (position) {
      case 'new':
        return 'üü° –ù–æ–≤–µ';
      case 'processing':
        return 'üü† –í –æ–±—Ä–æ–±—Ü—ñ';
      case 'rejection':
        return 'üî¥ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ';
      case 'done':
        return 'üü¢ –í–∏–∫–æ–Ω–∞–Ω–æ';
        
        default:
        return position;
 // —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –≤—ñ–¥–æ–º–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ –±–µ–∑ –∑–º—ñ–Ω
    }
  };
  

  const openEditPopup = (orderId) => {
    setOrderToEdit(orderId);
    setIsEditPopupOpen(true);
  };

  const closeEditPopup = () => {
    setOrderToEdit(null);
    setIsEditPopupOpen(false);
  };

  const handleSaveChanges = async (updatedOrder) => {
    try {
      // –í–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
      const response = await AdminApi.putAdminOrder(updatedOrder.id, updatedOrder);
      console.log('Order updated successfully:', updatedOrder);
      // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –¥–∞–Ω–∏—Ö –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
      setPeopleData(prevData => {
        const updatedData = [...prevData];
        const index = updatedData.findIndex(order => order.id === updatedOrder.id);
        if (index !== -1) {
          updatedData[index] = { ...updatedData[index], ...updatedOrder };
        }
        return updatedData;
      });
      // –ó–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      closeEditPopup();
    } catch (error) {
      console.error('Error updating order:', error);
      if (error.response) {
        console.error('Server Response:', error.response.data);
        console.error('Status Code:', error.response.status);
      }
    }
    }
  

  return (
    <>
      <div className="title">
        <h1>–ü—Ä–∏–≤—ñ—Ç –¢–µ—Ç—è–Ω–æ üëãüèº,</h1>
      </div>
      <div className="customers">
        <div className="customers-header">
          <div className="customers-header-title">
            <h2>–£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
            <p>–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</p>
          </div>
          <div className="customers-header-search">
            <img src={search} alt="search" />
            <input
              type="text"
              placeholder="Search"
              className="search-input"
              value={searchText}
              onChange={e => setSearchText(e.target.value)}
              onBlur={filterList}
              onKeyDown={handleKeyDown}
            />
          </div>
        </div>
        <div className="customers-list">
          <div className="customers-list-title">
            <p className="list-name">–§–Ü–û</p>
            <p className="list-number">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</p>
            <p className="list-city">–ú—ñ—Å—Ç–æ</p>
            <p className="list-post">–ü–æ—à—Ç–∞</p>
            <p className="list-post-num">–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è</p>
            <p className="list-shop">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</p>
            <p className='list-total'>–°—É–º–∞</p>
            <p className="list-status">–°—Ç–∞—Ç—É—Å</p>
            <p className='list-edit'>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</p>
            <p className='list-delete'>–í–∏–¥–∞–ª–∏—Ç–∏</p>
          </div>
          <ul id="people-list">
  {displayPage().map(order => (
    <li key={order.id} className="list-li-customer">
      <p className="list-name">{order.firstName} {order.lastName}</p>
      <p className="list-number">{order.phone}</p>
      <p className="list-city">{order.city}</p>
      <p className="list-post">{order.postOffice}</p>
      <p className="list-post-num">{order.numberPost}</p>
      <p className="list-shop">
  {order.productItems.map((productItem, index) => (
    <span key={index}>
      {productItem.title}: {productItem.quantity}—à—Ç. {productItem.total} –≥—Ä–Ω.
      {index < order.productItems.length - 1 && ', '}
    </span>
  ))}
</p>
      <p className='list-total'>{order.totalAmount}</p>
      <p className="list-status">{getStatusEmoji(order.position)}</p>
      <p className='list-edit'>
                  <a onClick={() => openEditPopup(order)}>
                    <img src={edit} alt="edit" />
                  </a>
                </p>
      <p className='list-delete'><a onClick={() => {
    openDeletePopup(order.id)}} ><img src={delet}/></a></p>
    </li>
  ))}
</ul>
{showDeletePopup && (<DeletePopup onCancel={closeDeletePopup} onConfirm={handleDeleteCustomers} />)}

{isEditPopupOpen && (
            <EditOrderPopup order={orderToEdit} onSave={handleSaveChanges} onClose={closeEditPopup} />
          )}
          <div id="searchResult"></div>
        </div>
        <div className="customers-pages">
          <p>
            Showing data {currentPage} to {Math.min(currentPage * itemsPerPage, peopleData.length)} of {peopleData.length}
          </p>
          <ul className="customers-pages-list">
            <li className="customers-pages-li-back">
              <a href="#" onClick={() => handlePageClick(currentPage - 1)}>
                {'<'}
              </a>
            </li>
            {Array.from({ length: Math.ceil(peopleData.length / itemsPerPage) }).map((_, index) => (
              <li key={index + 1} className={`customers-pages-li ${currentPage === index + 1 ? 'customers-pages-li-on' : ''}`}>
                <a href="#" onClick={() => handlePageClick(index + 1)}>
                  {index + 1}
                </a>
              </li>
            ))}
            <li className="customers-pages-li-next">
              <a href="#" onClick={() => handlePageClick(currentPage + 1)}>
                {'>'}
              </a>
            </li>
          </ul>
        </div>
      </div>
    </>
  );
};

export default CustomerList;
